WEBVTT

1
00:00:08.252 --> 00:00:11.550
안녕하세요? 저는 레드햇과 Xiph.Org 소속의 몬티 몽고메리입니다.

2
00:00:11.550 --> 00:00:18.430
몇달 전, 저는 디지털 오디오와 왜 24비트/192kHz 음악을 다운로드하는 것이 말이 안 되는지에 대해 설명하는 글을 썼습니다.

3
00:00:18.430 --> 00:00:23.433
그 글에서, 저는 지나가듯이 디지털 파형은 계단 형태가 아니라고 언급했습니다.

4
00:00:23.433 --> 00:00:28.680
분명히, 디지털에서 아날로그로 다시 변환하면 분명 계단 형태의 신호가 나오지 않습니다.

5
00:00:29.865 --> 00:00:33.865
그 문서에서, 이 부분이 많은 사람들이 지적한 가장 큰 부분입니다.

6
00:00:33.865 --> 00:00:37.221
사실, 제가 받은 반 이상의 이메일이

7
00:00:37.221 --> 00:00:39.663
기본적인 디지털 신호에 대한 질문과 의견이었습니다.

8
00:00:39.894 --> 00:00:45.285
흥미로운 것이 있으니 잠시 몇몇 간단한 디지털 신호에 대해서 살펴보죠.

9
00:00:49.747 --> 00:00:51.006
잠시 이렇다고 가정해보죠

10
00:00:51.006 --> 00:00:54.089
디지털 신호가 어떻게 행동하는지 우리가 전혀 모른다고 말입니다.

11
00:00:54.734 --> 00:00:56.841
그런 상황에선 디지털 측정기를 쓰는 것은

12
00:00:56.841 --> 00:00:59.049
아무 의미가 없습니다.

13
00:00:59.049 --> 00:01:00.937
다행히도, 이 실험에 관해서는

14
00:01:00.937 --> 00:01:04.020
많은 아날로그 장비들이 여기 있습니다.

15
00:01:04.020 --> 00:01:05.972
일단, 우린 신호 발생기가 필요합니다.

16
00:01:05.972 --> 00:01:08.190
아날로그 입력 신호를 만들기 위해서 말이죠.

17
00:01:08.190 --> 00:01:12.692
여기서는 1978년에 나온 HP3325가 있습니다.

18
00:01:12.692 --> 00:01:14.153
이건 여전히 꽤 좋은 신호 발생기에요

19
00:01:14.153 --> 00:01:15.614
여러분이 크기나

20
00:01:15.614 --> 00:01:16.532
무게나

21
00:01:16.532 --> 00:01:17.577
전력 소모나

22
00:01:17.577 --> 00:01:18.910
시끄러운 팬을 신경쓰시지 않는다면

23
00:01:18.910 --> 00:01:20.329
이베이에서 찾으실 수 있을 겁니다.

24
00:01:20.329 --> 00:01:23.863
때로 배송비는 좀 더 들겠지만요.

25
00:01:24.617 --> 00:01:28.500
다음으로, 우린 아날로그 파형을 아날로그 오실로스코프로 관찰할 겁니다.

26
00:01:28.500 --> 00:01:31.550
이 90년대 중반에 나온 텍트로닉스 2246 같은 장비로요.

27
00:01:31.550 --> 00:01:34.761
가장 마지막에 나온, 그리고 최고의 아날로그 스코프입니다.

28
00:01:34.761 --> 00:01:36.807
가정 실험실에 꼭 필요하죠.

29
00:01:37.716 --> 00:01:40.852
그리고 마지막으로, 신호의 주파수 스펙트럼을 분석할

30
00:01:40.852 --> 00:01:43.177
아날로그 스펙트럼 분석기입니다.

31
00:01:43.177 --> 00:01:47.732
신호 발생기와 같은 라인인 HP3585 같은 장비죠.

32
00:01:47.732 --> 00:01:50.615
여기 있는 다른 장비들처럼 이 장비는 초보적이고

33
00:01:50.615 --> 00:01:52.905
웃기게 큰 마이크로 컨트롤러를 갖고 있지만

34
00:01:52.905 --> 00:01:56.276
입력에서부터 여러분이 화면에서 보는 신호 경로 상에서

35
00:01:56.276 --> 00:01:58.537
모든 것이 아날로그입니다.

36
00:01:58.537 --> 00:02:00.329
이 모든 것들은 오래되었지만

37
00:02:00.329 --> 00:02:01.993
그 무게를 고려하지 않는다면

38
00:02:01.993 --> 00:02:03.844
성능은 여전히 상당히 좋습니다.

39
00:02:04.536 --> 00:02:06.868
지금, 우리는 신호 발생기가

40
00:02:06.868 --> 00:02:12.829
1 kHz, 실효값 1 볼트 사인파를 만들도록 설정했습니다.

41
00:02:13.414 --> 00:02:15.220
우리는 오실로스코프에서 사인파를 볼 수 있구요,

42
00:02:15.220 --> 00:02:21.428
실제로 1 kHz, 실효값 1 볼트 신호임을 확인할 수 있죠.

43
00:02:21.428 --> 00:02:24.108
최고-최저값이 약 2.8V임으로부터요.

44
00:02:24.308 --> 00:02:27.561
또한 스펙트럼 분석기의 측정 결과와도 일치합니다.

45
00:02:27.561 --> 00:02:30.644
분석기는 약간의 낮은 백색 잡음도 보여주네요.

46
00:02:30.644 --> 00:02:32.190
그리고 몇몇 고주파 왜곡도요.

47
00:02:32.190 --> 00:02:36.649
그 고조파 왜곡들의 최고점은 기본파보다 약 70 dB 정도 낮습니다.

48
00:02:36.649 --> 00:02:38.612
이건 이번 실험에서 아무 문제가 되지 않지만,

49
00:02:38.612 --> 00:02:40.574
저는 그래도 지적하고 싶었어요

50
00:02:40.574 --> 00:02:42.452
나중에야 여러분이 깨닫지 않도록요.

51
00:02:44.036 --> 00:02:47.142
이제, 중간에 디지털 샘플링 단계를 추가해보죠.

52
00:02:48.557 --> 00:02:51.024
변환을 위해서, 우리는 재미없는

53
00:02:51.024 --> 00:02:53.374
상용 수준의 eMagic USB 1 오디오 장치를 쓸 겁니다.

54
00:02:53.374 --> 00:02:55.337
이것은 현재 기준으로 10년도 더 되었고

55
00:02:55.337 --> 00:02:57.257
구식이 되어갑니다.

56
00:02:57.964 --> 00:03:02.676
최신의 변환기들은 성능이 수십 배 좋습니다.

57
00:03:03.076 --> 00:03:07.924
평탄성, 선형성, 지터, 잡음 특성, 기타 등등...

58
00:03:07.924 --> 00:03:09.353
아마 여러분은 알아차리기 어려우실 수 있지만요.

59
00:03:09.353 --> 00:03:11.604
왜냐면 성능 향상을 측정할 수 있다는 게

60
00:03:11.604 --> 00:03:13.609
우리가 그걸 들을 수 있음을 의미하진 않고

61
00:03:13.609 --> 00:03:16.404
이 오래된 상용 수준의 제품들은 이미

62
00:03:16.404 --> 00:03:18.643
이상적인 정도의 경계 수준으로 원래 신호대로 처리하거든요.

63
00:03:20.244 --> 00:03:22.825
eMagic 장비를 제 ThinkPad 노트북에 연결합니다.

64
00:03:22.825 --> 00:03:26.121
이 노트북이 비교를 위한 디지털 파형과 스펙트럼을 보여줄 거에요.

65
00:03:26.121 --> 00:03:28.788
그리고 노트북은 디지털 신호를 eMagic 장비로 다시 돌려보냅니다.

66
00:03:28.788 --> 00:03:30.921
신호를 아날로그로 다시 바꾸고

67
00:03:30.921 --> 00:03:33.332
출력 스코프로 관찰하기 위해서죠.

68
00:03:33.332 --> 00:03:35.582
입력에서 출력으로, 왼쪽에서 오른쪽으로 신호가 전달됩니다.

69
00:03:40.211 --> 00:03:41.214
자 이제 시작하죠.

70
00:03:41.214 --> 00:03:43.924
아날로그 신호를 디지털로 바꾸는 것에서 출발해서

71
00:03:43.924 --> 00:03:47.347
다른 단계 없이 아날로그로 다시 바꿀 겁니다.

72
00:03:47.347 --> 00:03:49.268
신호 발생기는 설정이 완료되었습니다.

73
00:03:49.268 --> 00:03:52.649
방금 한 것처럼 1 kHz 사인파를 만들도록요.

74
00:03:52.649 --> 00:03:57.428
입력 쪽 오실로스코프에서 아날로그 사인파를 보실 수 있습니다.

75
00:03:57.428 --> 00:04:01.694
이 신호를 44.1 kHz로 샘플링해서 16 비트 PCM으로 디지털화합니다.

76
00:04:01.694 --> 00:04:03.828
CD처럼요.

77
00:04:03.828 --> 00:04:07.156
디지털화된 신호는 우리가 방금 본 것과 일치합니다. 그리고...

78
00:04:07.156 --> 00:04:10.836
이제 우리가 아날로그 스펙트럼 분석기로 보는 것과도요.

79
00:04:10.836 --> 00:04:15.154
이 장비의 큰 임피던스 입력이 조금 노이즈를 만들지만요.

80
00:04:15.154 --> 00:04:15.956
이제

81
00:04:18.248 --> 00:04:20.798
파형 화면은 디지털화된 사인파를 보여줍니다.

82
00:04:20.798 --> 00:04:23.966
각 샘플당 한 칸인 계단 형태로요.

83
00:04:23.966 --> 00:04:26.388
그리고 디지털에서 아날로그로 다시 변환된

84
00:04:26.388 --> 00:04:29.054
출력 신호를 보시면...

85
00:04:29.054 --> 00:04:32.052
정확히 원래 사인파와 같죠.

86
00:04:32.052 --> 00:04:33.483
계단은 없습니다.

87
00:04:33.914 --> 00:04:37.193
그래요, 1 kHz는 꽤 저주파수니까

88
00:04:37.193 --> 00:04:40.633
어쩌면 계단이 잘 안 보이거나 부드러워졌을 수 있겠죠.

89
00:04:40.739 --> 00:04:49.492
좋아요. 나이퀴스트 주파수와 더 가깝게 주파수를 올려보죠.
15 kHz 정도로요.

90
00:04:49.492 --> 00:04:53.545
이제 사인파는 한 주기당 세 개의 샘플 미만으로 표현될 것이구요...

91
00:04:53.545 --> 00:04:55.838
디지털 파형은 꽤 나빠 보입니다.

92
00:04:55.838 --> 00:04:59.798
음, 속임수 같아 보이겠네요. 아날로그 출력은...

93
00:05:01.876 --> 00:05:06.033
여전히 완벽한 사인파입니다. 원본과 똑같죠.

94
00:05:06.633 --> 00:05:09.228
계속해보죠.

95
00:05:17.353 --> 00:05:20.151
16 kHz...

96
00:05:23.198 --> 00:05:25.616
17 kHz...

97
00:05:28.201 --> 00:05:29.945
18 kHz...

98
00:05:33.822 --> 00:05:35.548
19 kHz...

99
00:05:40.457 --> 00:05:42.465
20 kHz.

100
00:05:49.097 --> 00:05:52.350
인간의 가청 영역에 도달했습니다.

101
00:05:52.350 --> 00:05:54.377
출력 파형은 여전히 완벽합니다.

102
00:05:54.377 --> 00:05:58.025
톱니 모양 경계나, 수직 형태나, 계단은 없죠.

103
00:05:58.025 --> 00:06:01.342
그럼 계단 형태는 어디 갔죠?

104
00:06:01.342 --> 00:06:03.198
대답하지 마세요, 이건 속이는 질문이에요.

105
00:06:03.198 --> 00:06:04.318
그런 건 원래 없었습니다.

106
00:06:04.318 --> 00:06:06.652
디지털 파형을 계단 형태로 그리는 건

107
00:06:08.712 --> 00:06:10.772
처음부터 잘못된 것이었습니다.

108
00:06:10.942 --> 00:06:11.998
왜일까요?

109
00:06:11.998 --> 00:06:14.366
계단 형태 함수는 연속 시간 함수니까요.

110
00:06:14.366 --> 00:06:16.201
들쭉날쭉하고, 부분부분이지만,

111
00:06:16.201 --> 00:06:19.700
모든 시간들에서 정해진 값을 갖죠.

112
00:06:19.700 --> 00:06:22.004
샘플링된 신호는 완전히 다릅니다.

113
00:06:22.004 --> 00:06:23.337
이산 시간 신호에요.

114
00:06:23.337 --> 00:06:27.337
각각의 샘플링되는 순간의 지점에서만 신호를 갖죠.

115
00:06:27.337 --> 00:06:32.596
그리고 그 사이사이에는 어떠한 값도 없어요.

116
00:06:32.596 --> 00:06:36.666
이산 신호를 적절히 그리면 막대 사탕 그래프처럼 그려집니다.

117
00:06:40.020 --> 00:06:42.974
어떤 디지털 신호에 대응되는, 연속적이고 아날로그적인 신호는

118
00:06:42.974 --> 00:06:45.364
각 샘플 지점을 부드럽게 이으면서 지납니다.

119
00:06:45.364 --> 00:06:50.153
그리고 이는 고주파이든 저주파이든 마찬가지죠.

120
00:06:50.153 --> 00:06:53.033
자 이제 흥미로우면서도 전혀 명확하지 않아 보이는 것은 이겁니다:

121
00:06:53.033 --> 00:06:55.454
오직 하나의 대역 제한된(정해진 주파수의) 신호만이

122
00:06:55.454 --> 00:06:57.417
각 지점을 정확히 통과합니다.

123
00:06:57.417 --> 00:06:58.708
유일한 답이죠.

124
00:06:58.708 --> 00:07:01.246
그러니, 여러분이 대역 제한된 신호를 샘플링하고

125
00:07:01.246 --> 00:07:02.612
다시 역변환하면

126
00:07:02.612 --> 00:07:06.462
원래 신호만이 가능한 유일한 출력이죠.

127
00:07:06.462 --> 00:07:07.838
그리고

128
00:07:07.838 --> 00:07:11.721
"아, 전 그 지점들을 지나는 다른 신호를 그릴 수 있어요."라고 말씀하시기 전에,

129
00:07:11.721 --> 00:07:14.283
네 그러실 수 있죠. 하지만...

130
00:07:17.268 --> 00:07:20.521
만약 그게 원래 신호와 미세하게라도 다르면

131
00:07:20.521 --> 00:07:24.905
그건 나이퀴스트 샘플링 주파수보다 높은 주파수 성분을 가질 것이고

132
00:07:24.905 --> 00:07:26.185
대역 제한되어 있다는 조건을 깨게 되므로

133
00:07:26.185 --> 00:07:28.358
유효한 답이 아니게 됩니다.

134
00:07:28.574 --> 00:07:30.036
그럼 왜 모두가 혼란스러워하게 되고

135
00:07:30.036 --> 00:07:32.702
디지털 신호가 계단 형태라고 착각하게 되었을까요?

136
00:07:32.702 --> 00:07:34.900
전 두 개의 그럴듯한 이유를 생각해 봤어요.

137
00:07:34.900 --> 00:07:37.956
첫 번째: 샘플링된 신호를 계단 형태로 바꾸는 것은

138
00:07:37.972 --> 00:07:39.294
아주 쉽기 때문이죠.

139
00:07:39.294 --> 00:07:42.409
그저 각 샘플 값들을 다음 샘플이 나타날 때까지 쭉 연장하면 되죠.

140
00:07:42.409 --> 00:07:44.414
이것은 0차 홀드라고 불리는데요(역주: 0차는 상수니까요)

141
00:07:44.414 --> 00:07:47.913
그리고 이는 일부 디지털->아날로그 변환기가 작동하는 중요한 원리입니다.

142
00:07:47.913 --> 00:07:50.089
특히 간단한 변환기들이요.

143
00:07:50.089 --> 00:07:55.591
자, 디지털->아날로그 변환을 찾는 분들은 아마도

144
00:07:55.592 --> 00:07:59.550
어디선가 계단 형태의 파형 그래프를 보셨을 겁니다.

145
00:07:59.550 --> 00:08:01.982
하지만 이건 변환이 끝난 게 아니에요.

146
00:08:01.982 --> 00:08:04.250
출력 신호도 아니죠.

147
00:08:04.944 --> 00:08:05.684
두 번째,

148
00:08:05.684 --> 00:08:07.529
이게 더 그럴듯한 이유인데요,

149
00:08:07.529 --> 00:08:09.449
더 잘 알 법한 엔지니어들이,

150
00:08:09.449 --> 00:08:10.441
예를 들어 저 같은,

151
00:08:10.441 --> 00:08:13.193
기술적으로 틀렸지만 계단 형태로 그래프를 그린다는 거죠.

152
00:08:13.193 --> 00:08:15.571
이건 이미지 편집기에서 확대하면 뚱뚱한 조각들이 보이는 것의

153
00:08:15.571 --> 00:08:17.395
1차원 버전이라고 할 수 있죠.

154
00:08:17.395 --> 00:08:19.241
픽셀들은 정사각형들이 아닙니다.

155
00:08:19.241 --> 00:08:23.081
그것들은 2차원 함수 공간의 샘플들이고, 이것들도 마찬가지로,

156
00:08:23.081 --> 00:08:26.366
개념적으로는, 무한히 작은 점들이죠.

157
00:08:26.366 --> 00:08:28.500
현실적으로, 무한히 작은 것들을 보거나

158
00:08:28.500 --> 00:08:30.804
다루는 것은 아주 어렵습니다.

159
00:08:30.804 --> 00:08:32.212
그래서 큰 정사각형들로 표현되는 거죠.

160
00:08:32.212 --> 00:08:35.966
디지털 계단 그림은 정확히 같은 것입니다.

161
00:08:35.966 --> 00:08:37.684
그저 편의상 그렇게 그리는 거죠.

162
00:08:37.684 --> 00:08:40.404
계단은 절대 없어요.

163
00:08:45.652 --> 00:08:48.233
디지털 신호를 아날로그로 다시 변환할 때

164
00:08:48.233 --> 00:08:50.900
그 결과도 부드럽습니다. 비트 수와 상관없이요.

165
00:08:50.900 --> 00:08:53.193
24 비트건 16 비트건...

166
00:08:53.193 --> 00:08:54.196
8 비트건...

167
00:08:54.196 --> 00:08:55.486
상관없어요.

168
00:08:55.486 --> 00:08:57.534
그럼 이 말은, 디지털 비트 수는

169
00:08:57.534 --> 00:08:58.953
아무 차이도 만들지 않는단 걸까요?

170
00:08:59.245 --> 00:09:00.521
당연히 아니죠.

171
00:09:02.121 --> 00:09:06.046
여기 2번 채널은 똑같은 사인파 입력이지만,

172
00:09:06.046 --> 00:09:09.086
디더링 있는 8비트로 양자화해볼게요.

173
00:09:09.086 --> 00:09:14.174
스코프 상에서, 2번 채널에 대해서 여전히 깔끔한
부드러운 사인파를 볼 수 있죠.

174
00:09:14.174 --> 00:09:18.014
둘은 아주 비슷해 보이지만,
약간 더 많은 노이즈도 보실 수 있습니다.

175
00:09:18.014 --> 00:09:19.305
이게 단서에요.

176
00:09:19.305 --> 00:09:21.273
신호의 스펙트럼을 보면...

177
00:09:22.889 --> 00:09:23.732
아하!

178
00:09:23.732 --> 00:09:26.398
사인파는 저기 영향을 받지 않은 채로 있지만

179
00:09:26.398 --> 00:09:28.490
2번 채널의 8비트 신호의 노이즈 레벨은

180
00:09:28.490 --> 00:09:32.470
훨씬 높군요!

181
00:09:32.948 --> 00:09:36.148
이게 비트수가 만들어내는 차이에요.

182
00:09:36.148 --> 00:09:37.434
이겁니다!

183
00:09:37.822 --> 00:09:39.956
우리가 신호를 디지털화할 때, 먼저 샘플링합니다.

184
00:09:39.956 --> 00:09:42.366
샘플링 단계는 완벽해요. 아무 정보도 잃지 않습니다.

185
00:09:42.366 --> 00:09:45.626
하지만 양자화할 때,
양자화는 노이즈를 만듭니다.

186
00:09:47.827 --> 00:09:50.793
비트 수는 얼마나 많은 노이즈가 만들어지는지

187
00:09:50.793 --> 00:09:52.569
그리고 결국 노이즈 층의 레벨이
어떻게 되는지 결정하죠.

188
00:10:00.170 --> 00:10:03.646
이 디더링된 양자화에 따른 노이즈는 어떻게 들릴까요?

189
00:10:03.646 --> 00:10:06.012
8비트 사인파 신호를 들어봅시다.

190
00:10:12.521 --> 00:10:15.273
삐 하는 톤 외에는 들리는 게 없으셨을 수 있습니다.

191
00:10:15.273 --> 00:10:18.740
노이즈만 듣기 위해서 먼저 원 신호에서 사인파를 빼고

192
00:10:18.740 --> 00:10:21.683
이득을 높여보죠. 노이즈는 조용하니까요.

193
00:10:32.009 --> 00:10:35.049
아날로그 녹음 장비를 사용해보신 분들은

194
00:10:35.049 --> 00:10:36.670
아마 생각하신 적이 있을 겁니다.

195
00:10:36.670 --> 00:10:40.382
"이럴수가! 이 소리는 마치 테이프에서 나는 쉿 하는 소리 같아!"

196
00:10:40.382 --> 00:10:41.929
음, 이건 테이프의 쉿 하는 소리와는 다릅니다.

197
00:10:41.929 --> 00:10:43.433
비슷하게 행동하긴 하지만요.

198
00:10:43.433 --> 00:10:45.225
그리고 가우시안 디더를 사용하면

199
00:10:45.225 --> 00:10:47.646
둘은 수학적으로 완전히 동일합니다.

200
00:10:47.646 --> 00:10:49.225
이것은 테이프의 쉿 소리에요.

201
00:10:49.225 --> 00:10:51.774
직관적으로, 이는 우리가 테이프의 쉿 소리를 측정할 수 있고

202
00:10:51.774 --> 00:10:54.196
따라서 자기 오디오 테이프의 노이즈 층은

203
00:10:54.196 --> 00:10:56.233
데시벨 말고 비트 단위에서

204
00:10:56.233 --> 00:10:59.902
소리를 디지털화하다 보니 있는 것이란 걸 알 수 있죠.

205
00:10:59.902 --> 00:11:03.028
컴팩트 카세트...

206
00:11:03.028 --> 00:11:05.449
그걸 기억하실 만큼 나이 있으신 분들은

207
00:11:05.449 --> 00:11:09.161
완벽한 상태의 9비트 테이프를 접해보셨을지도 몰라요.

208
00:11:09.161 --> 00:11:11.209
5, 6비트가 더 일반적이지민요.

209
00:11:11.209 --> 00:11:13.876
특히나 테이프 데크에서 녹음된 것이라면요. 

210
00:11:13.876 --> 00:11:19.422
맞습니다. 여러분의 믹스 테이프는 6비트를 썼을 겁니다.
여러분이 행운아라면요!

211
00:11:19.837 --> 00:11:22.345
스튜디오에서 사용된 전문적인 오픈 릴 테이프는

212
00:11:22.345 --> 00:11:24.553
몇 비트를 쓸까요? 간신히...

213
00:11:24.553 --> 00:11:26.473
얼마쯤일까요?...

214
00:11:26.473 --> 00:11:27.604
13 비트입니다.

215
00:11:27.604 --> 00:11:28.980
보다 잡음이 억제되었겠죠.

216
00:11:28.980 --> 00:11:32.062
이것이 크고 고성능의 컴팩트 디스크(CD)에서 DDD란 단어가

217
00:11:32.062 --> 00:11:35.208
보이는 이유입니다.

218
00:11:40.116 --> 00:11:42.825
저는 계속 양자화할 때 디더링한다고 얘기했는데요,

219
00:11:42.825 --> 00:11:44.734
그럼 디더가 정확히 뭘까요?

220
00:11:44.734 --> 00:11:47.284
더 중요하게, 그게 뭘 할까요?

221
00:11:47.284 --> 00:11:49.876
신호를 양자화하기위해 가장 간단한 방법은

222
00:11:49.876 --> 00:11:52.329
디지털 진폭 값을 원래 아날로그 진폭에

223
00:11:52.329 --> 00:11:54.377
가장 가깝게 고르는 것입니다.

224
00:11:54.377 --> 00:11:55.337
당연하죠, 그렇죠?

225
00:11:55.337 --> 00:11:57.545
불행히도, 이 간단한 양자화 개념에서

226
00:11:57.545 --> 00:11:59.220
발생하게 되는 그 노이즈는

227
00:11:59.220 --> 00:12:02.174
입력 신호에 의존합니다.

228
00:12:02.174 --> 00:12:04.596
그래서 우리는 일정하지 않거나

229
00:12:04.596 --> 00:12:06.142
왜곡을 일으키거나

230
00:12:06.142 --> 00:12:09.054
아무튼 좋지 않은 노이즈를 얻게 됩니다.

231
00:12:09.054 --> 00:12:11.764
디더는 특별히 만들어진 노이즈인데

232
00:12:11.764 --> 00:12:15.273
이 단순한 양자화에 의해 발생하는 노이즈를 제거하죠.

233
00:12:15.273 --> 00:12:18.025
디더는 양자화 노이즈를 없애거나 가리진 않습니다.

234
00:12:18.025 --> 00:12:20.190
실질적으로 그걸 대체하죠.

235
00:12:20.190 --> 00:12:22.612
노이즈 특성이 입력에 영향받지 않도록

236
00:12:22.612 --> 00:12:24.794
선택되어서요.

237
00:12:25.256 --> 00:12:27.081
디더가 뭘 하는지 보시죠.

238
00:12:27.081 --> 00:12:30.078
신호 발생기는 이 실험을 위해서는 노이즈가 너무 많으니

239
00:12:30.431 --> 00:12:33.161
수학적으로 완벽한 사인파를

240
00:12:33.161 --> 00:12:34.782
이 노트북으로 만들 겁니다.

241
00:12:34.782 --> 00:12:38.205
그리고 디더링하면서 8비트로 양자화할게요.

242
00:12:39.006 --> 00:12:41.342
파형 화면에서 좋은 사인파를 볼 수 있구요

243
00:12:41.342 --> 00:12:43.452
그리고 출력 스코프에서도요

244
00:12:44.222 --> 00:12:44.972
그리고...

245
00:12:46.588 --> 00:12:49.375
아날로그 스펙트럼 분석기가 신호를 잡으면...

246
00:12:50.713 --> 00:12:53.588
일정한 노이즈 층과 깨끗한 꼭대기의 주파수를 볼 수 있죠.

247
00:12:56.864 --> 00:12:58.611
두 스펙트럼 화면에서도요.

248
00:12:58.611 --> 00:12:59.646
이전과 마찬가지로요.

249
00:12:59.646 --> 00:13:01.549
다시 말씀드리지만, 이건 디더링이 있는 경우입니다.

250
00:13:02.196 --> 00:13:04.225
이제 디더링을 꺼볼게요.

251
00:13:05.779 --> 00:13:07.913
디더링이 멋진, 평평한 노이즈 층으로 분산시켰던

252
00:13:07.913 --> 00:13:09.577
양자화 노이즈가

253
00:13:09.577 --> 00:13:12.286
고조파 왜곡 피크들로 나타나네요.

254
00:13:12.286 --> 00:13:16.030
노이즈 층은 낮았지만, 여기선 왜곡들이 0이 아니게 되면서,

255
00:13:16.030 --> 00:13:19.668
왜곡 꼭대기 점들은 디더링 노이즈보다 높은 데서 나타나죠.

256
00:13:19.668 --> 00:13:22.318
8비트 양자화에서 이 효과는 강조됩니다.

257
00:13:22.488 --> 00:13:24.200
16 비트에서는,

258
00:13:24.692 --> 00:13:25.929
디더링이 없더라도,

259
00:13:25.929 --> 00:13:28.308
고조파 왜곡이 아주 낮아서

260
00:13:28.308 --> 00:13:30.708
완전히 들리지 않게 됩니다.

261
00:13:30.708 --> 00:13:34.581
여전히, 우리는 이를 완전히 없애기 위해 디더링을 쓸 수 있죠.

262
00:13:34.581 --> 00:13:36.489
그러고 싶다면요.

263
00:13:37.642 --> 00:13:39.273
디더를 다시 잠시 끄면,

264
00:13:40.934 --> 00:13:43.444
디더링 없는 양자화에서의 왜곡의 절대 레벨이

265
00:13:43.444 --> 00:13:47.070
거의 일정함을 보실 겁니다.

266
00:13:47.070 --> 00:13:49.033
입력 진폭에 상관없이요.

267
00:13:49.033 --> 00:13:51.998
하지만 신호 레벨이 비트당 절반 이하로 내려가면,

268
00:13:51.998 --> 00:13:54.036
모든 것들이 0으로 양자화됩니다.

269
00:13:54.036 --> 00:13:54.910
어떤 의미로는,

270
00:13:54.910 --> 00:13:58.557
모든 게 0으로 양자화된다는 것은 100% 왜곡이 생긴단 뜻이죠!

271
00:13:58.833 --> 00:14:01.588
디더는 이 왜곡도 없애줍니다.

272
00:14:01.588 --> 00:14:03.599
디더링을 다시 활성화하면...

273
00:14:03.599 --> 00:14:06.377
1/4 비트에서도 우리의 신호가 있네요.

274
00:14:06.377 --> 00:14:09.076
멋진 평탄한 노이즈 층과 함께요.

275
00:14:09.630 --> 00:14:11.220
노이즈 층은 꼭 평평할 필요는 없습니다.

276
00:14:11.220 --> 00:14:12.798
디더는 우리가 선택한 노이즈에요.

277
00:14:12.798 --> 00:14:15.006
그래서 노이즈가 덜 거슬리고

278
00:14:15.006 --> 00:14:17.017
잘 들리지 않게 선택해보죠.

279
00:14:18.142 --> 00:14:22.484
인간의 청력은 2 kHz에서 4 kHz의 중간 대역에서 가장 민감합니다.

280
00:14:22.484 --> 00:14:25.438
따라서 여기가 배경 잡음이 가장 잘 들리는 구간이죠.

281
00:14:25.438 --> 00:14:29.406
우리는 디더링 노이즈가 민감한 주파수에서 떨어지도록 모양을 만들어서

282
00:14:29.406 --> 00:14:31.241
잘 안 들리게 할 수 있죠.

283
00:14:31.241 --> 00:14:33.910
보통 최고 주파수로 옮깁니다.

284
00:14:34.249 --> 00:14:37.460
16비트 디더링 노이즈는 듣기에는 보통 너무 조용합니다.

285
00:14:37.460 --> 00:14:39.668
하지만 노이즈 모양을 만드는 예제를 들어보죠.

286
00:14:39.668 --> 00:14:42.234
다시 이득을 크게 해서요.

287
00:14:56.020 --> 00:14:59.977
마지막으로, 디더링된 양자화 노이즈는 작게 들리더라도

288
00:14:59.977 --> 00:15:04.276
디더링되지 않은 양자화 노이즈보다 전체적으로 더 많은 전력을 갖습니다.

289
00:15:04.276 --> 00:15:07.902
거의 무음 상태의 통로에서도 VU 미터 상에서 그걸 볼 수 있죠.

290
00:15:07.902 --> 00:15:10.537
하지만 디더링은 단순히 켜고 끄고의 선택이 아닙니다.

291
00:15:10.537 --> 00:15:14.712
우리는 디더링의 전력이 약간의 왜곡보다 더 작게 만들 수 있습니다.

292
00:15:14.712 --> 00:15:18.313
그에 따라 전체적인 나쁜 효과는 작아지겠죠.

293
00:15:19.605 --> 00:15:22.790
또 입력 신호를 이렇게 변조해볼게요:

294
00:15:27.098 --> 00:15:30.206
...입력 변화가 양자화 노이즈에 어떤 영향을 주는지 보이기 위해서요.

295
00:15:30.206 --> 00:15:33.289
최대 디더링 전력에서, 잡음은 평평하고, 일정하고,

296
00:15:33.289 --> 00:15:35.643
특별하지 않습니다. 우리가 바란 것처럼요:

297
00:15:40.937 --> 00:15:42.772
디더링 전력을 줄이면,

298
00:15:42.772 --> 00:15:46.356
입력이 점점 양자화 노이즈의 진폭과 특성에

299
00:15:46.356 --> 00:15:47.977
영향을 미칩니다.

300
00:16:09.883 --> 00:16:13.844
모양이 만들어진 디더링도 비슷합니다.

301
00:16:13.844 --> 00:16:16.553
하지만 노이즈의 모양을 만드는 것은 장점을 하나 더 주죠.

302
00:16:16.553 --> 00:16:18.804
짧게 얘기해서,

303
00:16:18.804 --> 00:16:20.937
입력이 출력에 큰 영향을 주지 않기 위해 필요한

304
00:16:20.937 --> 00:16:23.662
디더링 전력이 더 낮아지게 할 수 있다는 겁니다

305
00:16:49.172 --> 00:16:51.508
지금까지 디더링에 대해 얘기한 시간에 불구하고,

306
00:16:51.508 --> 00:16:53.012
우리는 원래 신호의 100 데시벨 아래에서의

307
00:16:53.012 --> 00:16:56.372
차이에 대해서 얘기하고 있습니다.

308
00:16:56.372 --> 00:16:59.806
CD가 처음에 설계된 대로 14비트를 쓴다면

309
00:16:59.806 --> 00:17:01.513
디더는 더 중요할 수 있죠.

310
00:17:01.989 --> 00:17:02.644
어쩌면요.

311
00:17:02.644 --> 00:17:05.438
16 비트에서라면, 사실, 결벽증에 가깝습니다.

312
00:17:05.438 --> 00:17:08.019
디더링을 보험으로 생각할 수 있죠.

313
00:17:08.019 --> 00:17:11.443
다이내믹 레인지에 몇 데시벨을 추가로 줄 수 있는 보험이요.

314
00:17:11.443 --> 00:17:12.804
혹시나 해서 이용하는.

315
00:17:12.990 --> 00:17:14.196
하지만 간단한 사실은,

316
00:17:14.196 --> 00:17:16.361
누구도 훌륭한 녹음을 최종 마스터링 단계에서

317
00:17:16.361 --> 00:17:19.182
디더링하지 않아서 망한 적은 없다는 겁니다.

318
00:17:24.414 --> 00:17:25.790
우리는 사인파를 써 왔는데요.

319
00:17:25.790 --> 00:17:28.254
우리가 시스템이 정해지고 제한된 주파수의 응답이 어떤지

320
00:17:28.254 --> 00:17:32.212
보고싶을 때 선택하는 분명한 선택지가 있습니다.

321
00:17:32.212 --> 00:17:34.217
이제 좀 더 복잡한 경우를 보죠.

322
00:17:34.217 --> 00:17:35.923
우리가 예상하는 것은

323
00:17:35.923 --> 00:17:39.671
제가 입력을 사각파로 바꿀 때...

324
00:17:42.718 --> 00:17:45.921
입력 스코프는 1 kHz 사각파를 확인해주네요.

325
00:17:45.921 --> 00:17:47.351
출력 스코프는...

326
00:17:48.614 --> 00:17:51.102
정확히 그래야 할 화면을 보여주네요.

327
00:17:51.102 --> 00:17:53.900
사각파는 실제로 무엇일까요?

328
00:17:54.654 --> 00:17:57.982
음, 우리는 그 파는 주기의 절반동안 어떤 양의 값을 갖다가

329
00:17:57.982 --> 00:18:00.788
나머지 반 주기 동안 음의 값으로 즉시 바뀌는

330
00:18:00.788 --> 00:18:02.910
파라고 할 수 있겠죠.

331
00:18:02.910 --> 00:18:05.076
하지만 이는 아무것도 안 알려줍니다

332
00:18:05.076 --> 00:18:07.241
어떻게 이 입력이

333
00:18:07.241 --> 00:18:09.378
이 출력이 되는지에 대해서요.

334
00:18:10.132 --> 00:18:12.713
그럼 우리는 파형이란 게

335
00:18:12.713 --> 00:18:15.508
이산적인 주파수들의 합임을 기억해야 합니다.

336
00:18:15.508 --> 00:18:18.302
그리고 사각파는 특별히도 기본 주파수와

337
00:18:18.302 --> 00:18:19.636
무한히 많은 고조파들의

338
00:18:19.636 --> 00:18:22.228
단순한 합이라는 것도요.

339
00:18:22.228 --> 00:18:24.597
이들을 다 더하면, 사각파가 나옵니다.

340
00:18:26.398 --> 00:18:27.433
처음엔,

341
00:18:27.433 --> 00:18:29.225
이게 그리 유용해 보이지 않습니다.

342
00:18:29.225 --> 00:18:31.561
무한히 많은 고조파들을 더해야

343
00:18:31.561 --> 00:18:33.108
답이 나오니까요.

344
00:18:33.108 --> 00:18:35.977
아, 하지만 우리는 모든 고조파들을 다 더할 필요는 없습니다.

345
00:18:36.960 --> 00:18:39.902
우리는 꽤나 날카로은 안티애일리어싱 필터를 쓰니까요.

346
00:18:39.902 --> 00:18:42.206
이 필터는 20 kHz 이상을 잘라내서

347
00:18:42.206 --> 00:18:44.158
우리 신호가 대역제한되게 만들죠.

348
00:18:44.158 --> 00:18:46.421
이는 우리가 이걸 얻는다는 뜻입니다:

349
00:18:52.500 --> 00:18:56.468
...그리고 이건 정확히 우리가 출력 스코프에서 보게 되는 것이죠.

350
00:18:56.468 --> 00:18:59.550
이 대역제한 신호의 모서리에서 보이는 잔물결 같은 건

351
00:18:59.550 --> 00:19:00.926
깁스 효과라고 불리는 것입니다.

352
00:19:00.926 --> 00:19:04.137
이는 주파수 영역에서 0이 아닌 에너지 대역을 잘라내면

353
00:19:04.137 --> 00:19:07.006
반드시 생깁니다.

354
00:19:07.006 --> 00:19:09.854
경험적으로, 더 날카롭게 잘라낼수록

355
00:19:09.854 --> 00:19:11.188
이 잔물결은 더 심해지는데

356
00:19:11.188 --> 00:19:12.777
이는 거의 맞지만

357
00:19:12.777 --> 00:19:14.900
우리는 이를 잘 생각해야 합니다.

358
00:19:14.900 --> 00:19:15.774
가령...

359
00:19:15.774 --> 00:19:19.529
우리의 꽤나 날카로운 안티애일리어싱 필터가

360
00:19:19.529 --> 00:19:23.181
신호를 두 번 처리하게 되면 무슨 일을 할 거라고 생각하시나요?

361
00:19:34.136 --> 00:19:37.588
약간의 딜레이를 제외하면,

362
00:19:37.588 --> 00:19:39.348
그 답은...

363
00:19:39.348 --> 00:19:40.857
아무것도 안 한다입니다.

364
00:19:41.257 --> 00:19:43.302
신호는 이미 대역 제한되었죠.

365
00:19:43.656 --> 00:19:46.590
제한된 대역을 똑같이 제한하는 것은 아무것도 하지 않는 겁니다.

366
00:19:46.590 --> 00:19:50.686
두 번째 처리는 이미 없앤 주파수들을 또 없애지 못하겠죠.

367
00:19:52.070 --> 00:19:53.737
이게 중요합니다.

368
00:19:53.737 --> 00:19:56.233
사람들은 이 잔물결들이 안티애일리어싱과 안티이미징 필터들이

369
00:19:56.233 --> 00:19:59.945
만들어내는 것이라고 생각합니다.

370
00:19:59.945 --> 00:20:01.737
이는 신호가 필터를 통과할 때마다

371
00:20:01.737 --> 00:20:03.913
잔물결이 많아진다는 것을 암시하죠.

372
00:20:03.913 --> 00:20:05.950
우리는 이런 일이 생기지 않음을 볼 수 있습니다.

373
00:20:05.950 --> 00:20:09.492
그럼 이 잔물결들은 필터가 처음 신호를 처리할 때 만들어낸 것일까요?

374
00:20:09.492 --> 00:20:10.537
아뇨, 전혀 아닙니다.

375
00:20:10.537 --> 00:20:12.126
이는 미묘한 차이지만,

376
00:20:12.126 --> 00:20:15.252
깁스 효과는 필터에 의해 생기는 게 아닙니다.

377
00:20:15.252 --> 00:20:18.836
이들은 대역 제한된 신호의 일부입니다.

378
00:20:18.836 --> 00:20:20.798
우리가 완벽한 디지털 사각파로 보이는 신호를

379
00:20:20.798 --> 00:20:23.508
합성해 낼지라도,

380
00:20:23.508 --> 00:20:26.206
그 신호는 여전히 채널 대역폭에 의해 제한됩니다.

381
00:20:26.206 --> 00:20:29.140
계단 형태의 표현이 오해를 부른다는 것을 기억하세요.

382
00:20:29.140 --> 00:20:32.222
여기 실제로 존재하는 것은 순간적인 샘플 지점들이고,

383
00:20:32.222 --> 00:20:36.148
오직 대역제한된 신호가 이들 지점들에 딱 맞습니다.

384
00:20:36.148 --> 00:20:39.614
우리가 보기에 완벽한 사각파를 그릴 때 한 것이라고는

385
00:20:39.614 --> 00:20:43.198
샘플 포인트들을 줄세워서 겉으로 보기에는

386
00:20:43.198 --> 00:20:47.785
점들을 연결했을 때 잔물결이 보이지 않게 한 것입니다.

387
00:20:47.785 --> 00:20:49.449
하지만 원래의 대역 제한된 신호는,

388
00:20:49.449 --> 00:20:52.742
이 잔물결들을 갖고 있습니다.

389
00:20:54.004 --> 00:20:56.542
그리고 이는 하나 더 중요한 사실을 알려주죠.

390
00:20:56.542 --> 00:20:59.550
디지털 신호의 시간 정확도는 샘플링 속도에 의존함을

391
00:20:59.550 --> 00:21:02.409
들어보셨을 겁니다. 다른 말로는,

392
00:21:02.409 --> 00:21:05.140
디지털 신호는 샘플 사이의 지점들에 대해서는

393
00:21:05.140 --> 00:21:08.041
아무것도 표현하지 못한다는 것이죠...

394
00:21:08.041 --> 00:21:11.422
이는 임펄스나 빠른 충격들은 정확히 샘플들에 대해

395
00:21:11.422 --> 00:21:14.473
정렬되어야 함을 의미하고, 안 그러면 타이밍이 망가지거나...

396
00:21:14.473 --> 00:21:16.219
아예 사라질 수도 있습니다.

397
00:21:16.711 --> 00:21:20.820
이 지점에서, 우리는 쉽게 뭐가 잘못되었는지 알 수 있죠.

398
00:21:20.820 --> 00:21:23.742
다시 말씀드리지만, 우리의 입력 신호는 대역 제한됩니다.

399
00:21:23.742 --> 00:21:26.036
그리고 디지털 신호들은 샘플들이고,

400
00:21:26.036 --> 00:21:29.340
계단이 아니죠. 점들을 이은 게 아닙니다.

401
00:21:31.572 --> 00:21:34.592
예를 들어, 우리는 확실히

402
00:21:36.777 --> 00:21:39.337
대역 제한된 사각파의 상승 모서리를

403
00:21:39.337 --> 00:21:42.004
샘플 사이의 원하는 곳에 놓을 수 있습니다.

404
00:21:42.004 --> 00:21:44.354
이 신호의 표현은 완벽하고

405
00:21:47.508 --> 00:21:50.218
완벽히 다시 만들어질 수 있습니다.

406
00:22:04.620 --> 00:22:06.526
이전 에피소드에서처럼,

407
00:22:06.526 --> 00:22:08.393
우리는 넓은 범위의 주제를 다루었고,

408
00:22:08.393 --> 00:22:10.868
각각의 표면을 거의 훑지조차 못했습니다.

409
00:22:10.868 --> 00:22:13.620
만약 생략이 있다면, 저의 죄는 이번에 더 크겠죠...

410
00:22:13.620 --> 00:22:16.286
하지만 여기서 끝내는 게 좋겠습니다.

411
00:22:16.286 --> 00:22:17.833
아니면, 좋은 시작점일 수도 있겠죠.

412
00:22:17.833 --> 00:22:18.708
더 깊이 파 내려가세요.

413
00:22:18.708 --> 00:22:19.710
실험하세요.

414
00:22:19.710 --> 00:22:21.374
저는 제 실험을 아주 신중하게 선택했습니다.

415
00:22:21.374 --> 00:22:23.668
간단하고 깔끔한 결과를 내도록요.

416
00:22:23.668 --> 00:22:26.217
원하신다면 여러분이 직접 해보실 수도 있겠죠.

417
00:22:26.217 --> 00:22:28.766
때로 우리는 멋진 장난감을 깨서 열고

418
00:22:28.766 --> 00:22:30.516
쏟아져 나오는 것들에 공부함으로써

419
00:22:30.516 --> 00:22:32.553
가장 많이 배울 수 있음을 인정합시다.

420
00:22:32.553 --> 00:22:35.230
그래도 돼요, 우린 엔지니어니까요.

421
00:22:35.230 --> 00:22:36.350
실험 값들을 가지고 놀고,

422
00:22:36.350 --> 00:22:37.972
코드를 연구하고 고치고,

423
00:22:37.972 --> 00:22:39.774
다른 실험들을 해보세요.

424
00:22:39.774 --> 00:22:40.692
작은 누름 버튼이 있는 실험 프로그램의 코드를 포함한

425
00:22:40.692 --> 00:22:42.398
모든 소스 코드들은

426
00:22:42.398 --> 00:22:44.361
Xiph.Org에 올려져 있습니다.

427
00:22:44.361 --> 00:22:45.940
실험 과정에서,

428
00:22:45.940 --> 00:22:47.401
여러분은 예상치 못하고 설명하지 못하는

429
00:22:47.401 --> 00:22:49.950
결과들을 마주할 수 있습니다.

430
00:22:49.950 --> 00:22:51.198
걱정 마세요!

431
00:22:51.198 --> 00:22:54.537
저의 이전의 제작물을 제외하고서도, 위키피디아는

432
00:22:54.537 --> 00:22:56.788
이러한 가벼운 연구에 환상적입니다.

433
00:22:56.788 --> 00:22:59.956
여러분이 정말로 신호를 이해하고 싶다면

434
00:22:59.956 --> 00:23:03.337
몇몇 학교들은 더 깊은 자료들을 제공합니다.

435
00:23:03.337 --> 00:23:07.380
MIT OpenCourseWare의

436
00:23:07.380 --> 00:23:08.798
6.003과 6.007 신호와 시스템 모듈이 그 예죠.

437
00:23:08.798 --> 00:23:11.593
그리고 당연히, Xiph.Org에는 커뮤니티가 늘 있습니다.

438
00:23:12.792 --> 00:23:13.929
더 깊이 파고드시든 마시든,

439
00:23:13.929 --> 00:23:14.974
제 커피가 떨어졌으니,

440
00:23:14.974 --> 00:23:16.436
다음 시간까지,

441
00:23:16.436 --> 00:23:19.316
해피 해킹!